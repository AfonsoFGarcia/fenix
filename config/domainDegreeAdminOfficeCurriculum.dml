/*
 * the Degree Administrative Office part of the Fenix domain model
 */

class net.sourceforge.fenixedu.domain.Branch extends net.sourceforge.fenixedu.domain.DomainObject {
    Integer secondaryCredits;
    String code;
    Integer keyDegreeCurricularPlan;
    Integer specializationCredits;
    String name;
    String acronym;
    
    interface "

    public net.sourceforge.fenixedu.util.BranchType getBranchType();
    public void setBranchType(net.sourceforge.fenixedu.util.BranchType branchType);
    public java.util.List getAreaCurricularCourseGroups(net.sourceforge.fenixedu.util.AreaType areaType);
    "
}

class net.sourceforge.fenixedu.domain.CreditsInAnySecundaryArea extends net.sourceforge.fenixedu.domain.DomainObject {
    Integer givenCredits;
    Integer studentCurricularPlanKey;
    Integer enrolmentKey;
}

class net.sourceforge.fenixedu.domain.CreditsInScientificArea extends net.sourceforge.fenixedu.domain.DomainObject {
    Integer givenCredits;
    Integer studentCurricularPlanKey;
    Integer enrolmentKey;
    Integer scientificAreaKey;
}

class net.sourceforge.fenixedu.domain.CurricularCourseEquivalence extends net.sourceforge.fenixedu.domain.DomainObject {
    Integer oldCurricularCourseKey;
    Integer equivalentCurricularCourseKey;
    Integer degreeCurricularPlanKey;
}

class net.sourceforge.fenixedu.domain.CurricularCourseGroup extends net.sourceforge.fenixedu.domain.DomainObject {
    String ojbConcreteClass;
    Integer keyBranch;
    String name;
    Integer minimumValue;
    Integer maximumValue;

    interface "

    public Integer getMaximumCredits();
    public Integer getMinimumCredits();
    public Integer getMinimumNumberOfOptionalCourses();
    public Integer getMaximumNumberOfOptionalCourses();

    public void setMaximumCredits(Integer maximumCredits);
    public void setMinimumCredits(Integer minimumCredits);
    public void setMinimumNumberOfOptionalCourses(Integer minimumNumberOfOptionalCourses);
    public void setMaximumNumberOfOptionalCourses(Integer maximumNumberOfOptionalCourses);
    
    public net.sourceforge.fenixedu.util.AreaType getAreaType();
    public void setAreaType(net.sourceforge.fenixedu.util.AreaType areaType);
    "
}

    class net.sourceforge.fenixedu.domain.AreaCurricularCourseGroup extends net.sourceforge.fenixedu.domain.CurricularCourseGroup {
    }
    
    class net.sourceforge.fenixedu.domain.OptionalCurricularCourseGroup extends net.sourceforge.fenixedu.domain.CurricularCourseGroup {
    }

class net.sourceforge.fenixedu.domain.CurricularCourseScope extends net.sourceforge.fenixedu.domain.DomainObject {
    Integer branchKey;
    Integer curricularCourseKey;
    Integer curricularSemesterKey;

    interface "

    public java.util.Calendar getBeginDate();
    public java.util.Calendar getEndDate();
    public void setBeginDate(java.util.Calendar beginDate);
    public void setEndDate(java.util.Calendar endDate);
    public Boolean isActive();
    "
}

class net.sourceforge.fenixedu.domain.CurricularSemester extends net.sourceforge.fenixedu.domain.DomainObject {
    Integer curricularYearKey;
    Integer semester;
}

class net.sourceforge.fenixedu.domain.CurricularYear extends net.sourceforge.fenixedu.domain.DomainObject {
    Integer year;
}

class net.sourceforge.fenixedu.domain.Degree extends net.sourceforge.fenixedu.domain.DomainObject {
    String concreteClassForDegreeCurricularPlans;
    String nome;
    String sigla;
    
    interface "
    public net.sourceforge.fenixedu.util.TipoCurso getTipoCurso();
    public void setTipoCurso(net.sourceforge.fenixedu.util.TipoCurso tipoCurso);
    "
}

class net.sourceforge.fenixedu.domain.DegreeCurricularPlan extends net.sourceforge.fenixedu.domain.DomainObject {
    String concreteClassForStudentCurricularPlans;
    Integer degreeDuration;
    Integer degreeKey;
    String description;
    String descriptionEn;
    Date endDate;
    Date initialDate;
    Integer minimalYearForOptionalCourses;
    String name;
    Double neededCredits;
    Integer numerusClausus;
    String ojbConcreteClass;
    
    interface "

    public net.sourceforge.fenixedu.domain.IStudentCurricularPlan getNewStudentCurricularPlan();
    public net.sourceforge.fenixedu.util.MarkType getMarkType();
    public net.sourceforge.fenixedu.util.DegreeCurricularPlanState getState();
    public java.util.List getListOfEnrollmentRules(net.sourceforge.fenixedu.domain.IStudentCurricularPlan studentCurricularPlan,
            net.sourceforge.fenixedu.domain.IExecutionPeriod executionPeriod);
    public java.util.List getCurricularCoursesFromArea(net.sourceforge.fenixedu.domain.IBranch area, net.sourceforge.fenixedu.util.AreaType areaType);
    public java.util.List getCurricularCoursesFromAnyArea();
    public java.util.List getCommonAreas();
    public java.util.List getSpecializationAreas();
    public java.util.List getSecundaryAreas();
    public java.util.List getTFCs();
    public java.util.List getAllOptionalCurricularCourseGroups();
    public java.util.List getCurricularCoursesByYearAndSemesterAndBranch(int year, Integer semester, net.sourceforge.fenixedu.domain.IBranch area);
    public java.util.List getSpecialListOfCurricularCourses();
    
    public void setMarkType(net.sourceforge.fenixedu.util.MarkType markType);
    public void setState(net.sourceforge.fenixedu.util.DegreeCurricularPlanState state);
   
    "
}

    class net.sourceforge.fenixedu.domain.DegreeCurricularPlanLEC extends net.sourceforge.fenixedu.domain.DegreeCurricularPlan {
    }
    
    class net.sourceforge.fenixedu.domain.DegreeCurricularPlanLEEC extends net.sourceforge.fenixedu.domain.DegreeCurricularPlan {
    }
    
    class net.sourceforge.fenixedu.domain.DegreeCurricularPlanLEIC extends net.sourceforge.fenixedu.domain.DegreeCurricularPlan {
    }
    
    class net.sourceforge.fenixedu.domain.DegreeCurricularPlanLEICTAGUS extends net.sourceforge.fenixedu.domain.DegreeCurricularPlan {
    }
    
    class net.sourceforge.fenixedu.domain.DegreeCurricularPlanLEM extends net.sourceforge.fenixedu.domain.DegreeCurricularPlan {
    }

class net.sourceforge.fenixedu.domain.DegreeInfo extends net.sourceforge.fenixedu.domain.DomainObject {
    String additionalInfoEn;
    String historyEn;
    Double markMax;
    String additionalInfo;
    String professionalExitsEn;
    String professionalExits;
    String linksEn;
    String classificationsEn;
    String descriptionEn;
    String objectives;
    String testIngressionEn;
    String links;
    String classifications;
    String testIngression;
    Integer driftsInitial;
    String objectivesEn;
    Double markMin;
    Integer driftsFirst;
    String description;
    Double markAverage;
    Integer driftsSecond;
    String history;
    Integer degreeKey;

    interface "
    public java.sql.Timestamp getLastModificationDate();
    public void setLastModificationDate(java.sql.Timestamp lastModificationDate);
    "
}

class net.sourceforge.fenixedu.domain.Department extends net.sourceforge.fenixedu.domain.DomainObject {
    String code;
    String name;
}

class net.sourceforge.fenixedu.domain.DepartmentCourse extends net.sourceforge.fenixedu.domain.DomainObject {
    String nome;
    String sigla;
    Integer chaveDepartamento;
    Integer codigoInterno;
}

class net.sourceforge.fenixedu.domain.Enrolment extends net.sourceforge.fenixedu.domain.DomainObject 
    implements org.apache.ojb.broker.PersistenceBrokerAware {
    String createdBy;
    Date creationDate;
    Integer curricularCourseKey;
    Integer keyExecutionPeriod;
    String ojbConcreteClass;
    Integer studentCurricularPlanKey;
    Integer accumulatedWeight;

    interface "
    
    public net.sourceforge.fenixedu.domain.curriculum.EnrollmentCondition getCondition();
    public net.sourceforge.fenixedu.domain.curriculum.EnrollmentState getEnrollmentState();
    public net.sourceforge.fenixedu.domain.curriculum.EnrolmentEvaluationType getEnrolmentEvaluationType();
    public void setCondition(net.sourceforge.fenixedu.domain.curriculum.EnrollmentCondition condition);
    public void setEnrollmentState(net.sourceforge.fenixedu.domain.curriculum.EnrollmentState state);
    public void setEnrolmentEvaluationType(net.sourceforge.fenixedu.domain.curriculum.EnrolmentEvaluationType type);
    "
}

    class net.sourceforge.fenixedu.domain.EnrolmentInExtraCurricularCourse extends net.sourceforge.fenixedu.domain.Enrolment {
    }
    
    class net.sourceforge.fenixedu.domain.EnrolmentInOptionalCurricularCourse extends net.sourceforge.fenixedu.domain.Enrolment {
    }

class net.sourceforge.fenixedu.domain.EnrolmentEquivalence extends net.sourceforge.fenixedu.domain.DomainObject {
    Integer enrolmentKey;
}

class net.sourceforge.fenixedu.domain.EnrolmentEvaluation extends net.sourceforge.fenixedu.domain.DomainObject 
    implements Comparable {
    String checkSum;
    Date when;
    Integer personResponsibleForGradeKey;
    String observation;
    Integer employeeKey;
    Integer enrolmentKey;
    Date gradeAvailableDate;
    Date examDate;
    String grade;
    
    interface "

    public abstract net.sourceforge.fenixedu.domain.curriculum.EnrolmentEvaluationType getEnrolmentEvaluationType();
    public abstract net.sourceforge.fenixedu.util.EnrolmentEvaluationState getEnrolmentEvaluationState();
    public abstract void setEnrolmentEvaluationType(net.sourceforge.fenixedu.domain.curriculum.EnrolmentEvaluationType type);
    public abstract void setEnrolmentEvaluationState(net.sourceforge.fenixedu.util.EnrolmentEvaluationState state);
    public abstract boolean isNormal();
    public abstract boolean isImprovment();

    "
}

class net.sourceforge.fenixedu.domain.log.EnrolmentLog extends net.sourceforge.fenixedu.domain.DomainObject {
    Integer keyCurricularCourse;
    Date date;
    Integer keyStudent;
    
    interface "

    public abstract net.sourceforge.fenixedu.util.EnrolmentAction getAction();
    public abstract void setAction(net.sourceforge.fenixedu.util.EnrolmentAction action);
    "
}

class net.sourceforge.fenixedu.domain.EnrolmentPeriod extends net.sourceforge.fenixedu.domain.DomainObject {
    String ojbConcreteClass;
    Date endDate;
    Date startDate;
    Integer keyDegreeCurricularPlan;
    Integer keyExecutionPeriod;
}

    class net.sourceforge.fenixedu.domain.EnrolmentPeriodInClasses extends net.sourceforge.fenixedu.domain.EnrolmentPeriod {
    }
    
    class net.sourceforge.fenixedu.domain.EnrolmentPeriodInCurricularCourses extends net.sourceforge.fenixedu.domain.EnrolmentPeriod {
    }

class net.sourceforge.fenixedu.domain.EquivalentEnrolmentForEnrolmentEquivalence extends net.sourceforge.fenixedu.domain.DomainObject {
    Integer enrolmentEquivalenceKey;
    Integer equivalentEnrolmentKey;
}

class net.sourceforge.fenixedu.domain.degree.enrollment.NotNeedToEnrollInCurricularCourse extends net.sourceforge.fenixedu.domain.DomainObject {
    Integer studentCurricularPlanKey;
    Integer curricularCourseKey;
}

class net.sourceforge.fenixedu.domain.precedences.Precedence extends net.sourceforge.fenixedu.domain.DomainObject {
    Integer keyCurricularCourse;
    
    interface " 
        public net.sourceforge.fenixedu.domain.curriculum.CurricularCourseEnrollmentType evaluate(net.sourceforge.fenixedu.domain.precedences.PrecedenceContext precedenceContext);
    "
}

class net.sourceforge.fenixedu.domain.precedences.Restriction extends net.sourceforge.fenixedu.domain.DomainObject {
    String ojbConcreteClass;
    Integer keyPrecedence;  
    
    interface "     
        public net.sourceforge.fenixedu.domain.curriculum.CurricularCourseEnrollmentType evaluate(net.sourceforge.fenixedu.domain.precedences.PrecedenceContext precedenceContext);
    "
}

class net.sourceforge.fenixedu.domain.precedences.RestrictionByCurricularCourse extends net.sourceforge.fenixedu.domain.precedences.Restriction {
    Integer keyPrecedentCurricularCourse;
}


class net.sourceforge.fenixedu.domain.precedences.RestrictionByNumberOfCurricularCourses extends net.sourceforge.fenixedu.domain.precedences.Restriction {
    Integer numberOfCurricularCourses;
}

class net.sourceforge.fenixedu.domain.precedences.RestrictionByNumberOfDoneCurricularCourses extends net.sourceforge.fenixedu.domain.precedences.RestrictionByNumberOfCurricularCourses {
}

class net.sourceforge.fenixedu.domain.precedences.RestrictionDoneCurricularCourse extends net.sourceforge.fenixedu.domain.precedences.RestrictionByCurricularCourse {
}

class net.sourceforge.fenixedu.domain.precedences.RestrictionDoneOrHasEverBeenEnrolledInCurricularCourse extends net.sourceforge.fenixedu.domain.precedences.RestrictionDoneCurricularCourse {
}

class net.sourceforge.fenixedu.domain.precedences.RestrictionHasEverBeenOrIsCurrentlyEnrolledInCurricularCourse extends net.sourceforge.fenixedu.domain.precedences.RestrictionDoneOrHasEverBeenEnrolledInCurricularCourse {
}

class net.sourceforge.fenixedu.domain.precedences.RestrictionHasEverBeenOrWillBeAbleToBeEnrolledInCurricularCourse extends net.sourceforge.fenixedu.domain.precedences.RestrictionDoneOrHasEverBeenEnrolledInCurricularCourse {
}

class net.sourceforge.fenixedu.domain.precedences.RestrictionNotDoneCurricularCourse extends net.sourceforge.fenixedu.domain.precedences.RestrictionByCurricularCourse {
}

class net.sourceforge.fenixedu.domain.precedences.RestrictionNotEnrolledInCurricularCourse extends net.sourceforge.fenixedu.domain.precedences.RestrictionNotDoneCurricularCourse {
}

class net.sourceforge.fenixedu.domain.precedences.RestrictionPeriodToApply extends net.sourceforge.fenixedu.domain.precedences.Restriction {
    interface "
        public net.sourceforge.fenixedu.util.PeriodToApplyRestriction getPeriodToApplyRestriction();
        public void setPeriodToApplyRestriction(net.sourceforge.fenixedu.util.PeriodToApplyRestriction periodToApplyRestriction);
    "
}

class net.sourceforge.fenixedu.domain.ScientificArea extends net.sourceforge.fenixedu.domain.DomainObject {
    String name;
}

class net.sourceforge.fenixedu.domain.SecretaryEnrolmentStudent extends net.sourceforge.fenixedu.domain.DomainObject {
    String reasonDescription;
    Integer keyStudent;

    interface "
    public abstract net.sourceforge.fenixedu.util.SecretaryEnrolmentStudentReason getReasonType();
    public abstract void setReasonType(net.sourceforge.fenixedu.util.SecretaryEnrolmentStudentReason reasonType);
    "
}

class net.sourceforge.fenixedu.domain.Student extends net.sourceforge.fenixedu.domain.DomainObject {
    Integer studentKindKey;
    Double entryGrade;
    String istUniversity;
    Boolean enrollmentForbidden;
    String ingression;
    String contigent;
    Integer personKey;
    Boolean payedTuition;
    Boolean specialSeason;
    Integer keyRegistrationYear;
    Integer number;
    
    interface "

        public net.sourceforge.fenixedu.util.StudentState getState();
        public net.sourceforge.fenixedu.util.TipoCurso getDegreeType();
        public net.sourceforge.fenixedu.util.AgreementType getAgreementType();
        public void setAgreementType(net.sourceforge.fenixedu.util.AgreementType agreementType);
        public void setState(net.sourceforge.fenixedu.util.StudentState state);
        public void setDegreeType(net.sourceforge.fenixedu.util.TipoCurso degreeType);
        public net.sourceforge.fenixedu.util.EntryPhase getEntryPhase();
        public void setEntryPhase(net.sourceforge.fenixedu.util.EntryPhase entryPhase);
        public net.sourceforge.fenixedu.domain.IStudentCurricularPlan getActiveStudentCurricularPlan();
    "

}

class net.sourceforge.fenixedu.domain.StudentCurricularPlan extends net.sourceforge.fenixedu.domain.DomainObject {
    
    Integer branchKey;
    Double  classification;
    Integer completedCourses;
    Integer degreeCurricularPlanKey;
    Integer employeeKey;
    Integer enrolledCourses;
    Double givenCredits;
    String observations;
    String ojbConcreteClass;
    Date startDate;
    Integer studentKey;
    Date when;
    
    interface "
    
        public boolean areNewAreasCompatible(net.sourceforge.fenixedu.domain.IBranch specializationArea, net.sourceforge.fenixedu.domain.IBranch secundaryArea)
            throws net.sourceforge.fenixedu.persistenceTier.ExcepcaoPersistencia, net.sourceforge.fenixedu.applicationTier.Servico.exceptions.BothAreasAreTheSameServiceException, net.sourceforge.fenixedu.applicationTier.Servico.exceptions.InvalidArgumentsServiceException;
    
        public java.util.List getAllStudentEnrolledEnrollmentsInExecutionPeriod(net.sourceforge.fenixedu.domain.IExecutionPeriod executionPeriod);
        public java.util.List getAprovedEnrolmentsInExecutionPeriod(final net.sourceforge.fenixedu.domain.IExecutionPeriod executionPeriod);
        public boolean getCanChangeSpecializationArea();
        public Integer getCreditsInSecundaryArea();
        public Integer getCreditsInSpecializationArea();
        public net.sourceforge.fenixedu.util.StudentCurricularPlanState getCurrentState();
        public Integer getCurricularCourseAcumulatedEnrollments(net.sourceforge.fenixedu.domain.ICurricularCourse curricularCourse);
        public net.sourceforge.fenixedu.domain.curriculum.CurricularCourseEnrollmentType getCurricularCourseEnrollmentType(
                net.sourceforge.fenixedu.domain.ICurricularCourse curricularCourse, net.sourceforge.fenixedu.domain.IExecutionPeriod currentExecutionPeriod);
        public java.util.List getCurricularCoursesToEnroll(net.sourceforge.fenixedu.domain.IExecutionPeriod executionPeriod) throws net.sourceforge.fenixedu.domain.exceptions.FenixDomainException;
        public java.util.List getEnrollmentReports();
        public Integer getMaximumNumberOfAcumulatedEnrollments();
        public Integer getMaximumNumberOfCoursesToEnroll();
        public Integer getMinimumNumberOfCoursesToEnroll();
        public int getNumberOfApprovedCurricularCourses();
        public int getNumberOfEnrolledCurricularCourses();
        public net.sourceforge.fenixedu.domain.IBranch getSecundaryBranch();
        public net.sourceforge.fenixedu.util.Specialization getSpecialization();

        public boolean isCurricularCourseApproved(net.sourceforge.fenixedu.domain.ICurricularCourse curricularCourse);
        public boolean isCurricularCourseEnrolled(net.sourceforge.fenixedu.domain.ICurricularCourse curricularCourse);
        public boolean isCurricularCourseEnrolledInExecutionPeriod(net.sourceforge.fenixedu.domain.ICurricularCourse curricularCourse,
                net.sourceforge.fenixedu.domain.IExecutionPeriod executionPeriod);
        
        public void setCreditsInSecundaryArea(Integer creditsInSecundaryArea);
        public void setCreditsInSpecializationArea(Integer creditsInSpecializationArea);
        public void setCurrentState(net.sourceforge.fenixedu.util.StudentCurricularPlanState currentState);
        public void setEnrollmentReports(java.util.List enrollmentReports);
        public void setSecundaryBranch(net.sourceforge.fenixedu.domain.IBranch secundaryBranch);
        public void setSpecialization(net.sourceforge.fenixedu.util.Specialization specialization);
    "
}


    class net.sourceforge.fenixedu.domain.StudentCurricularPlanLEIC extends net.sourceforge.fenixedu.domain.StudentCurricularPlan {
            
        Integer creditsInSecundaryArea;
        Integer creditsInSpecializationArea;
        Integer secundaryBranchKey;
    }
    
    class net.sourceforge.fenixedu.domain.StudentCurricularPlanLEEC extends net.sourceforge.fenixedu.domain.StudentCurricularPlan {
        Integer creditsInSecundaryArea;
        Integer creditsInSpecializationArea;
        Integer secundaryBranchKey;
    }
    
class net.sourceforge.fenixedu.domain.StudentKind extends net.sourceforge.fenixedu.domain.DomainObject {
    Integer minCoursesToEnrol;
    Integer maxNACToEnrol;
    Integer maxCoursesToEnrol;
    
    interface "
    public abstract net.sourceforge.fenixedu.util.StudentType getStudentType();
    public abstract void setStudentType(net.sourceforge.fenixedu.util.StudentType studentType);  
    "
}

class net.sourceforge.fenixedu.domain.University extends net.sourceforge.fenixedu.domain.DomainObject {
    String code;
    String name;
}


/*
 * Relations definitions
 * 
 */

relation AttendsEnrolment {
    net.sourceforge.fenixedu.domain.Attends playsRole attends {
        multiplicity *;
    }
    net.sourceforge.fenixedu.domain.Enrolment playsRole enrolment;
}

relation AttendsStudent {
    net.sourceforge.fenixedu.domain.Attends playsRole associatedAttends {
        multiplicity *;
    }
    net.sourceforge.fenixedu.domain.Student playsRole aluno;
}

relation BranchCurricularCourseGroup {
    net.sourceforge.fenixedu.domain.Branch playsRole branch;

    net.sourceforge.fenixedu.domain.CurricularCourseGroup playsRole curricularCourseGroups {
        multiplicity *;
    }
}

relation BranchAreaCurricularCourseGroup {
    net.sourceforge.fenixedu.domain.Branch playsRole branchForWhichThisIsAreaCurricularCourseGroup;

    net.sourceforge.fenixedu.domain.AreaCurricularCourseGroup playsRole areaCurricularCourseGroups {
        multiplicity *;
    }
}

relation BranchOptionalCurricularCourseGroup {
    net.sourceforge.fenixedu.domain.Branch playsRole branchForWhichThisIsOptionalCurricularCourseGroup;

    net.sourceforge.fenixedu.domain.OptionalCurricularCourseGroup playsRole optionalCurricularCourseGroups {
        multiplicity *;
    }
}

relation BranchCurricularCourseScope {
    net.sourceforge.fenixedu.domain.Branch playsRole branch;
    
    net.sourceforge.fenixedu.domain.CurricularCourseScope playsRole scopes {
        multiplicity *;
    }
}

relation CurricularCourseCurricularCourseEquivalence {
    net.sourceforge.fenixedu.domain.CurricularCourseEquivalence playsRole curricularCourseEquivalences {
        multiplicity *;
    }
    net.sourceforge.fenixedu.domain.CurricularCourse playsRole equivalentCurricularCourse;
}

relation OldCurricularCourseCurricularCourseEquivalence {
    net.sourceforge.fenixedu.domain.CurricularCourseEquivalence playsRole oldCurricularCourseEquivalences {
        multiplicity *;
    }
    net.sourceforge.fenixedu.domain.CurricularCourse playsRole oldCurricularCourse;
}

relation CurricularCourseCurricularCourseGroup {
    net.sourceforge.fenixedu.domain.CurricularCourseGroup playsRole curricularCourseGroups {
        multiplicity *;
    }
    net.sourceforge.fenixedu.domain.CurricularCourse playsRole curricularCourses {
        multiplicity *;
    }
}

relation CurricularCourseCurricularCourseScope {
    net.sourceforge.fenixedu.domain.CurricularCourse playsRole curricularCourse;
    net.sourceforge.fenixedu.domain.CurricularCourseScope playsRole scopes {
        multiplicity *;
    }
}

relation CurricularCourseDepartmentCourse {
    net.sourceforge.fenixedu.domain.CurricularCourse playsRole associatedCurricularCourses {
        multiplicity *;
    }
    net.sourceforge.fenixedu.domain.DepartmentCourse playsRole departmentCourse;
}

relation CurricularCourseEnrolment {
    net.sourceforge.fenixedu.domain.Enrolment playsRole enrolments {
        multiplicity *;
    }
    net.sourceforge.fenixedu.domain.CurricularCourse playsRole curricularCourse;
}

relation CurricularCourseEnrolmentLog {
    net.sourceforge.fenixedu.domain.log.EnrolmentLog playsRole enrolmentLogs {
        multiplicity *;
    }
    net.sourceforge.fenixedu.domain.CurricularCourse playsRole curricularCourse;
}

relation CurricularCourseNotNeedToEnrollInCurricularCourse {
    net.sourceforge.fenixedu.domain.degree.enrollment.NotNeedToEnrollInCurricularCourse playsRole notNeedToEnrollInCurricularCourses {
        multiplicity *;
    }
    net.sourceforge.fenixedu.domain.CurricularCourse playsRole curricularCourse;
}

relation CurricularCoursePrecedence {
    net.sourceforge.fenixedu.domain.precedences.Precedence playsRole precedences {
        multiplicity *;
    }
    net.sourceforge.fenixedu.domain.CurricularCourse playsRole curricularCourse;
}

relation CurricularCourseRestrictionByCurricularCourse {
    net.sourceforge.fenixedu.domain.precedences.RestrictionByCurricularCourse playsRole restrictionsByCurricularCourse {
        multiplicity *;
    }
 
    net.sourceforge.fenixedu.domain.CurricularCourse playsRole precedentCurricularCourse;
}

relation CurricularCourseScientificArea {
    net.sourceforge.fenixedu.domain.CurricularCourse playsRole associatedCurricularCourses {
        multiplicity *;
    }
    net.sourceforge.fenixedu.domain.ScientificArea playsRole scientificArea;
}

relation CurricularCourseGroupScientificArea {
    net.sourceforge.fenixedu.domain.CurricularCourseGroup playsRole curricularCourseGroups {
        multiplicity *;
    }
    net.sourceforge.fenixedu.domain.ScientificArea playsRole scientificAreas {
        multiplicity *;
    }
}

relation CurricularCourseScopeCurricularSemester {
    net.sourceforge.fenixedu.domain.CurricularCourseScope playsRole scopes {
        multiplicity *;
    }
    net.sourceforge.fenixedu.domain.CurricularSemester playsRole curricularSemester;
}

relation CurricularCourseStudentReport {
    net.sourceforge.fenixedu.domain.gesdis.StudentCourseReport playsRole studentCourseReport {
        multiplicity 1;
    }
    net.sourceforge.fenixedu.domain.CurricularCourse playsRole curricularCourse;
}

relation CurricularCourseUniversity {
    net.sourceforge.fenixedu.domain.CurricularCourse playsRole associatedCurricularCourses {
        multiplicity *;
    }
    net.sourceforge.fenixedu.domain.University playsRole university;
}

relation CurricularSemesterCurricularYear {
    net.sourceforge.fenixedu.domain.CurricularSemester playsRole curricularSemesters {
        multiplicity *;
    }
    net.sourceforge.fenixedu.domain.CurricularYear playsRole curricularYear;
}

relation DegreeCurricularPlanBranch {
    net.sourceforge.fenixedu.domain.DegreeCurricularPlan playsRole degreeCurricularPlan;

    net.sourceforge.fenixedu.domain.Branch playsRole areas {
        multiplicity *;
    }
}

relation DegreeCurricularPlanCurricularCourseEquivalence {
    net.sourceforge.fenixedu.domain.DegreeCurricularPlan playsRole degreeCurricularPlan;

    net.sourceforge.fenixedu.domain.CurricularCourseEquivalence playsRole curricularCourseEquivalences {
        multiplicity *;
    }
}

relation DegreeCurricularPlanEnrolmentPeriod {
    net.sourceforge.fenixedu.domain.EnrolmentPeriod playsRole enrolmentPeriods {
        multiplicity *;
    }
    net.sourceforge.fenixedu.domain.DegreeCurricularPlan playsRole degreeCurricularPlan;
}

relation DegreeCurricularPlanCurricularCourse {
    net.sourceforge.fenixedu.domain.CurricularCourse playsRole curricularCourses {
        multiplicity *;
    }
    net.sourceforge.fenixedu.domain.DegreeCurricularPlan playsRole degreeCurricularPlan;
}

relation DegreeDegreeCurricularPlan {
    net.sourceforge.fenixedu.domain.DegreeCurricularPlan playsRole degreeCurricularPlans {
        multiplicity *;
    }
    net.sourceforge.fenixedu.domain.Degree playsRole degree;
}

relation DegreeDegreeInfo {
    net.sourceforge.fenixedu.domain.Degree playsRole degree;
    net.sourceforge.fenixedu.domain.DegreeInfo playsRole degreeInfos {
        multiplicity *;
    }
}

relation DepartmentDepartmentCourse {
    net.sourceforge.fenixedu.domain.DepartmentCourse playsRole disciplinasAssociadas {
        multiplicity *;
    }
    net.sourceforge.fenixedu.domain.Department playsRole departamento;
}

relation EnrolmentCreditsInAnySecundaryArea {
    net.sourceforge.fenixedu.domain.CreditsInAnySecundaryArea playsRole creditsInAnySecundaryAreas {
        multiplicity *;
    }
    net.sourceforge.fenixedu.domain.Enrolment playsRole enrolment;
}

relation EnrolmentCreditsInScientificArea {
    net.sourceforge.fenixedu.domain.CreditsInScientificArea playsRole creditsInScientificAreas {
        multiplicity *;
    }
    net.sourceforge.fenixedu.domain.Enrolment playsRole enrolment;
}

relation EnrolmentEnrolmentEquivalence {
    net.sourceforge.fenixedu.domain.EnrolmentEquivalence playsRole enrolmentEquivalences {
        multiplicity *;
    }
    net.sourceforge.fenixedu.domain.Enrolment playsRole enrolment;
}

relation EnrolmentEnrolmentEvaluation {
    net.sourceforge.fenixedu.domain.Enrolment playsRole enrolment;

    net.sourceforge.fenixedu.domain.EnrolmentEvaluation playsRole evaluations {
        multiplicity *;
    }
}

relation EnrolmentEquivalenceEquivalentEnrolmentForEnrolmentEquivalence {
    net.sourceforge.fenixedu.domain.EnrolmentEquivalence playsRole enrolmentEquivalence;

    net.sourceforge.fenixedu.domain.EquivalentEnrolmentForEnrolmentEquivalence playsRole equivalenceRestrictions {
        multiplicity *;
    }
}

relation EnrolmentEquivalentEnrolmentForEnrolmentEquivalence {
    net.sourceforge.fenixedu.domain.EquivalentEnrolmentForEnrolmentEquivalence playsRole equivalentEnrolmentForEnrolmentEquivalences {
        multiplicity *;
    }
    net.sourceforge.fenixedu.domain.Enrolment playsRole equivalentEnrolment;
}

relation EnrolmentEvaluationEmployee {
    net.sourceforge.fenixedu.domain.EnrolmentEvaluation playsRole enrolmentEvaluations {
        multiplicity *;
    }
    net.sourceforge.fenixedu.domain.Employee playsRole employee;
}

relation EnrolmentEvaluationPerson {
    net.sourceforge.fenixedu.domain.EnrolmentEvaluation playsRole enrolmentEvaluations {
        multiplicity *;
    }
    net.sourceforge.fenixedu.domain.Person playsRole personResponsibleForGrade;
}

relation EnrolmentExecutionPeriod {
    net.sourceforge.fenixedu.domain.Enrolment playsRole enrolments {
        multiplicity *;
    }
    net.sourceforge.fenixedu.domain.ExecutionPeriod playsRole executionPeriod;
}

relation EnrolmentPeriodExecutionPeriod {
    net.sourceforge.fenixedu.domain.EnrolmentPeriod playsRole enrolmentPeriod {
        multiplicity *;
    }
    net.sourceforge.fenixedu.domain.ExecutionPeriod playsRole executionPeriod;
}

relation ExecutionDegreeDegreeCurricularPlan {
    net.sourceforge.fenixedu.domain.ExecutionDegree playsRole executionDegrees {
        multiplicity *;
    }
    net.sourceforge.fenixedu.domain.DegreeCurricularPlan playsRole degreeCurricularPlan;
}

relation GroupStudentStudent {
    net.sourceforge.fenixedu.domain.finalDegreeWork.GroupStudent playsRole associatedGroupStudents {
        multiplicity *;
    }
    net.sourceforge.fenixedu.domain.Student playsRole student;
}

relation PersonDepartment {
    net.sourceforge.fenixedu.domain.Person playsRole associatedPersons {
        multiplicity *;
    }
    net.sourceforge.fenixedu.domain.Department playsRole manageableDepartmentCredits {
        multiplicity *;
    }
}

relation PrecedenceRestriction {
    net.sourceforge.fenixedu.domain.precedences.Precedence playsRole precedence;

    net.sourceforge.fenixedu.domain.precedences.Restriction playsRole restrictions {
        multiplicity *;
    }
}

relation ProposalBranch {
    net.sourceforge.fenixedu.domain.finalDegreeWork.Proposal playsRole associatedFinalDegreeWorkProposals {
        multiplicity *;
    }
    net.sourceforge.fenixedu.domain.Branch playsRole branches {
        multiplicity *;
    }
}

relation ScientificAreaCreditsInScientificArea {
    net.sourceforge.fenixedu.domain.CreditsInScientificArea playsRole creditsInScientificAreas {
        multiplicity *;
    }
    net.sourceforge.fenixedu.domain.ScientificArea playsRole scientificArea;
}

relation StudentCurricularPlanBranch {
    net.sourceforge.fenixedu.domain.StudentCurricularPlan playsRole studentCurricularPlans {
        multiplicity *;
    }
    net.sourceforge.fenixedu.domain.Branch playsRole branch;
}

relation StudentCurricularPlanCreditsInAnySecundaryArea {
    net.sourceforge.fenixedu.domain.CreditsInAnySecundaryArea playsRole creditsInAnySecundaryAreas {
        multiplicity *;
    }
    net.sourceforge.fenixedu.domain.StudentCurricularPlan playsRole studentCurricularPlan;
}

relation StudentCurricularPlanCreditsInScientificArea {
    net.sourceforge.fenixedu.domain.CreditsInScientificArea playsRole creditsInScientificAreas {
        multiplicity *;
    }
    net.sourceforge.fenixedu.domain.StudentCurricularPlan playsRole studentCurricularPlan;
}

relation StudentCurricularPlanDegreeCurricularPlan {
    net.sourceforge.fenixedu.domain.StudentCurricularPlan playsRole studentCurricularPlans {
        multiplicity *;
    }
    net.sourceforge.fenixedu.domain.DegreeCurricularPlan playsRole degreeCurricularPlan;
}

relation StudentCurricularPlanEmployee {
    net.sourceforge.fenixedu.domain.StudentCurricularPlan playsRole studentCurricularPlans {
        multiplicity *;
    }

    net.sourceforge.fenixedu.domain.Employee playsRole employee;
}

relation StudentCurricularPlanEnrolment {
    net.sourceforge.fenixedu.domain.StudentCurricularPlan playsRole studentCurricularPlan;
    
    net.sourceforge.fenixedu.domain.Enrolment playsRole enrolments {
        multiplicity *;
    }
}

relation StudentCurricularPlanLEECSecundaryBranch {
    net.sourceforge.fenixedu.domain.StudentCurricularPlanLEEC playsRole secundaryStudentCurricularPlansLEEC {
        multiplicity *;
    }
    
    net.sourceforge.fenixedu.domain.Branch playsRole secundaryBranch;
}

relation StudentCurricularPlanLEICSecundaryBranch {
    net.sourceforge.fenixedu.domain.StudentCurricularPlanLEIC playsRole secundaryStudentCurricularPlansLEIC {
        multiplicity *;
    }
    
    net.sourceforge.fenixedu.domain.Branch playsRole secundaryBranch;
}

relation StudentCurricularPlanNotNeedToEnrollInCurricularCourse {
    net.sourceforge.fenixedu.domain.StudentCurricularPlan playsRole studentCurricularPlan;

    net.sourceforge.fenixedu.domain.degree.enrollment.NotNeedToEnrollInCurricularCourse playsRole notNeedToEnrollCurricularCourses {
        multiplicity *;
    }
}

relation StudentCurricularPlanStudent {
    net.sourceforge.fenixedu.domain.StudentCurricularPlan playsRole studentCurricularPlans {
        multiplicity *;
    }

    net.sourceforge.fenixedu.domain.Student playsRole student;
}

relation StudentEnrolmentLog {
    net.sourceforge.fenixedu.domain.log.EnrolmentLog playsRole enrolmentLogs {
        multiplicity *;
    }
    net.sourceforge.fenixedu.domain.Student playsRole student;
}

relation StudentExecutionCourse {
    net.sourceforge.fenixedu.domain.ExecutionCourse playsRole executionCourses {
        multiplicity *;
    }
    
    net.sourceforge.fenixedu.domain.Student playsRole attendingStudents {
        multiplicity *;
    }
}

relation StudentExecutionYear {
    net.sourceforge.fenixedu.domain.Student playsRole students {
        multiplicity *;
    }

    net.sourceforge.fenixedu.domain.ExecutionYear playsRole registrationYear;
}

relation StudentPerson {
    net.sourceforge.fenixedu.domain.Student playsRole students {
        multiplicity *;
    }
    
    net.sourceforge.fenixedu.domain.Person playsRole person;
}

relation StudentSecretaryEnrolmentStudent {
    net.sourceforge.fenixedu.domain.SecretaryEnrolmentStudent playsRole secretaryEnrolmentStudents {
        multiplicity *;
    }
    net.sourceforge.fenixedu.domain.Student playsRole student;
}

relation StudentStudentKind {
    net.sourceforge.fenixedu.domain.Student playsRole students {
        multiplicity *;
    }
    net.sourceforge.fenixedu.domain.StudentKind playsRole studentKind;
}

relation ScientificAreaAreaCurricularCourseGroup {

    net.sourceforge.fenixedu.domain.ScientificArea playsRole scientificAreasForThis {
        multiplicity *;
    }

    net.sourceforge.fenixedu.domain.AreaCurricularCourseGroup playsRole areaCurricularCourseGroups {
        multiplicity *;
    }
    
}

