#WARNING: Be carefull with spaces (' '). Please be sure that all properties ends with a '\n' otherwise you'll get strange and hard to find bugs.


#This is the berserk configuration file
#If you don't provide a configuration file in your application classpath, default options will be used
#To make editable rows more visible I added a <---- int the previous row.

#VERY IMPORTANT: any storage broker you build it must have the getInstance method wich returns an object of the broker
#This is the broker Berserk will use to read your filter, services, and chain definitions
#Berserk doesn't provide a persistent storage mechanism for your application. However you can configure berserk to use user-defined
#storage mechanisms (see transaction manager below).
#This only referrs to berserk data, not application data. The implementation of application data mechanism is not berserk responsability.
#This is the OJB broker. It uses a relational database (mysql, by default)
# <------------
#storageBroker=pt.utl.ist.berserk.storage.ojb.StorageBrokerOJB
#This is a xml-based broker. You must specify the path where the filter, services and chain definitions are.
#If you choose this, berserk.transactionManager will be ignored.
# <-----------
storageBroker=pt.utl.ist.berserk.storage.digester.StorageBrokerDigester

#The following will be only evaluated if the storageBroker is an OJB broker. This name is the same specified in the OJB repository.
#If your application uses OJB you can opt to share OJB connection (this is how we do it in Fenix project). In this case you should also
#specify the same TransactionBroker in berserk.transactionBroker and application.transactionBroker below. Although some OJB configurations
#allows to bind transactions to threads and, in this specific case, you can specify different transaction brokers because they will
#access the same transaction object.
#Default berserk database name
# <-----------------
#berserk.databaseName=BERSERK_OJB
#The following will be only evaluated if the storageBroker is Digester. These are the default names that are searched in ./ if no path is specified.
# <---------------
berserk.filterDefinitions=/filters.xml
# <---------------
berserk.serviceDefinitions=/services.xml
# <---------------
berserk.filterChainsDefinitions=/filterChains.xml

#VERY IMPORTANT: any storage broker you build it must have the getInstance method wich returns an object of the broker
#The transaction broker is the object that manages database transactions.
#The berserk transaction broker is responsible by transactionally read the filter,services and definitions
#The application transaction broker is responsible by transactionally manipulate your application data.
#Berserk doesn't provide a transactional broker to your application. Berserk is only responsible to call the interface methods to start,
#commit and abort transactions. The implementation of the broker itself its not berserk responsability.
#This is the built-in berserk transaction manager. This assures that berserk transactionally access your filter, services and chains definitions.
# <---------------
#berserk.transactionManager = pt.utl.ist.berserk.storage.ojb.TransactionBrokerOJB
#If you use digester storage broker you should use this transaction manager
# <---------------
berserk.transactionManager = pt.utl.ist.berserk.storage.empty.TransactionBrokerEmpty
#Use this application transaction manager if your application doesn't have transactional characteristics.
#<---------------
application.transactionManager=ServidorPersistente.OJB.SuportePersistenteOJB