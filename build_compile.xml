<?xml version="1.0" encoding="ISO-8859-1"?>
<project basedir="." default="compile" name="Compilation Scripts">

	<property environment="env" />
	<property name="encoding" value="ISO-8859-1" />

	<property file="build.properties" />

	<!-- Source code directories -->
	<property name="src" location="src" />
	<property name="src_gen" location="src_gen" />
	<property name="src_remote" location="src_remote" />
	<property name="src_gen_remote" location="src_gen_remote" />
	<property name="config" location="config" />
	<property name="reports" location="reports" />
	<property name="institution.config" location="${institution.project}/config" />
	<property name="institution.metadata.tiles" location="${institution.project}/metadata/tiles" />
	<property name="config.web" location="metadata" />

	<!-- Directories for deploy -->
	<property name="deploy.home" location="deploy" />

	<!-- Directories with libraries (JARs) -->
	<property name="lib" location="lib" />

	<!-- Directory with SQL instructions -->
	<property name="etc" location="etc" />

	<!-- Directory with web-content -->
	<property name="web-content" location="web" />
	<property name="institution.web-content" location="${institution.project}/jsp" />

	<!-- DML definition file -->
	<property name="dml.definition.file" value="${config}/domain_model.dml" />

	<!-- WebServices(xfire) Directories -->
	<property name="xfire" location="${config}/xfire" />
	<property name="xfire.stubsTempDir" value="${basedir}/stubsTempDir" />
	<property name="xfire.stubsTempDir.classes" value="${basedir}/stubsTempDir/classes" />
	
	<!-- Mime Types file-->
	<property name="mime.types.file" value="${config}/mime.types"/>
	
	<!-- Compilation options -->
	<property name="compile.debug" value="on" />
	<property name="compile.deprecation" value="off" />
	<property name="compile.optimize" value="on" />

        <!-- set a different FenixDomainModel class until we don't need the ojbConcreteClass anylonger -->
        <property name="fenix.framework.domainModelClass" value="pt.ist.fenixframework.pstm.dml.FenixDomainModelWithOCC"/>
        <import file="dml-generate.xml"/>

	<target name="set-properties-copy" if="institution.project"
			description="Determine properties to use for build properties">
		<property name="build.home" location="build" />
	</target>

	<target name="set-properties-inplace" unless="institution.project"
			description="Determine properties to use for build properties">
		<property name="build.home" location="web" />
	</target>

	<target name="set-properties" description="Determine properties to use for build properties"
			depends="set-properties-copy, set-properties-inplace">
		<property name="build.home.webinf" value="${build.home}/WEB-INF" />
		<property name="build.home.webinf.classes" value="${build.home.webinf}/classes" />
		<property name="build.home.webinf.classes.meta.inf" value="${build.home.webinf.classes}/META-INF" />
		<property name="build.home.webinf.conf" value="${build.home.webinf}/conf" />
		<property name="build.home.webinf.libs" value="${build.home.webinf}/lib" />
		<property name="build.home.jsp_gen_code" value="${build.home}/Jsp-Code" />
		<property name="build.home.jsp_gen_code.classes" value="${build.home.jsp_gen_code}/classes" />
		<property name="build.home.reports" value="${build.home.webinf.classes}/reports" />
		<property name="dml.definition.file.completed" value="${build.home.webinf.classes}/domain_model.dml" />
		<property name="build.home.xfire" value="${build.home.webinf.classes.meta.inf}/xfire" />

		<path id="class.path.lib.ref">
			<fileset dir="${lib}">
				<include name="*.jar" />
				<exclude name="gwt-dev*.jar" />
			</fileset>
			<fileset dir="${build.home.webinf.libs}">
				<include name="*.jar" />
				<exclude name="gwt-dev*.jar" />
			</fileset>
		</path>
	</target>
	
	<target name="set-properties-gwt" description="Sets additional properties for GWT specific build tasks"
		depends="set-properties">
		
		<property name="build.gwtdestdir" location="${build.home}/gwt"/>
		
		<!-- Arguments to gwtc and devmode targets -->
		<property name="gwt.args" value="" />
		
		<!-- Configure path to GWT SDK -->
		<property name="gwt.sdk" value="${lib}" />
		
	</target>

	<target name="clean-all-copy" if="institution.project"
			description="Removes any generated files">
		<delete dir="${build.home}" />
	</target>

	<target name="clean-all-inplace" unless="institution.project"
			description="Removes any generated files">
		<delete dir="${build.home.webinf.classes}" />
	</target>

	<target name="clean-all" depends="set-properties, set-properties-gwt, clean-all-copy, clean-all-inplace"
			description="Removes any generated files">
		<delete dir="${build.home.xfire}" />
		<delete dir="${build.home}/images/logs" />
		<delete dir="${deploy.home}" />
		<delete dir="${src_gen}" />
		<delete dir="${build.gwtdestdir}" />
		<delete file=".actionAnnotationLog" />
	</target>

	<target name="check-dml-file" description="Checks if the dml file is still up to date">
		<uptodate property="dml.skip-compile" targetfile="${build.home.webinf.classes}/domain_model.dml" srcfile="${config}/domain_model.dml" />
	</target>

	<target name="prepare-copy" if="institution.project"
			description="Copy configuration files to compile dir">
		<mkdir dir="${build.home}" />
		<copy encoding="${encoding}" todir="${build.home}">
			<fileset dir="${web-content}">
				<include name="**/*.*" />
				<exclude name="WEB-INF//*.*" />
			</fileset>
		</copy>
	</target>

	<target name="prepare-inline" unless="institution.project"
			description="Copy configuration files to compile dir">
	</target>

	<target name="prepare"
			depends="set-properties, set-properties-gwt, check-dml-file, prepare-copy"
			description="Copy configuration files to compile dir">

		<tstamp>
			<format property="build.version" pattern="yyyy/MM/dd HH:mm:ss" />
		</tstamp>

		<mkdir dir="${build.home.webinf.classes}" />
		<mkdir dir="${build.home.xfire}" />
		<mkdir dir="${build.home}/images/logs" />
		<mkdir dir="${build.gwtdestdir}" />

		<echo file="${build.home.webinf.classes}/.build.version">${build.version}</echo>

		<copy file="build.properties" tofile="${build.home.webinf.classes}/.build.properties" />

		<copy encoding="${encoding}" todir="${build.home.webinf.classes}">
			<fileset dir="${config}" />
			<fileset file="build.properties" />
		</copy>

		<copy encoding="${encoding}" todir="${build.home.xfire}">
			<fileset dir="${xfire}" />
		</copy>
		
		<copy encoding="${encoding}" todir="${build.home.webinf.classes.meta.inf}" overwrite="true">
			<fileset file="${mime.types.file}"/>
		</copy>
		
		<antcall target="prepare-institution" />

		<!-- Replace tokens in configuration files with local config -->
		<ant antfile="build_generateStrutsMapping.xml" target="generate-struts-mapping" inheritall="false" />
	</target>

	<target name="prepare-institution" if="institution.project">
		<copy encoding="${encoding}" todir="${build.home}" overwrite="true">
			<fileset dir="${institution.web-content}">
				<include name="**/*.*" />
				<exclude name="WEB-INF//*.*" />
			</fileset>
		</copy>

		<copy encoding="${encoding}" todir="${build.home.webinf.classes}" overwrite="true">
			<fileset dir="${institution.config}" />
		</copy>

		<copy encoding="${encoding}" todir="${build.home.webinf}/tiles" overwrite="true">
			<fileset dir="${institution.metadata.tiles}" />
		</copy>

	</target>

	<!-- = = = = = = = = = = = = = = = = =
          macrodef: generateHostDependentProperties
          
          Generates a properties file with a definition (or key entry) for each host
          specified in the ${filter.hostnames} property.
          
          Args:
          	prefix   - the prefix for each host dependent property. This means that the property
          	           for each host will have the form ${prefix}.${hostname}
          	destfile - the name of the properties file to be generated. This file will contain
          	           one lines for each hostname with the format:
          	           
          	           ${prefix}.${hostname}=${prefix.hostname}
          	           
          	hostnames - the name of the property that contains the list of hostnames
          				default = filter.hostnames
         = = = = = = = = = = = = = = = = = -->
	<macrodef name="generateHostDependentProperties">
		<attribute name="hostnames" default="filter.hostnames" />
		<attribute name="prefix" default="" />
		<attribute name="destfile" default="" />

		<sequential>
			<delete file="@{destfile}.xml" />
			<delete file="${build.home.webinf.classes}/@{destfile}" />
			<property name="ant.regexp.regexpimpl" value="org.apache.tools.ant.util.regexp.Jdk14RegexpRegexp" />
			<concat destfile="@{destfile}.xml">
    				${@{hostnames}}
    				<filterchain>
					<tokenfilter>
						<ignoreblank />
						<trim />
						<stringtokenizer delims="," delimsaretokens="true" includeDelims="false" />
						<replaceregex pattern="(.*)" replace="\1${line.seperator}" />
					</tokenfilter>
					<tokenfilter>
						<replacestring from="," to="" />
						<trim />
						<ignoreblank />
					</tokenfilter>
					<prefixlines prefix="@@@{prefix}." />
					<prefixlines prefix="file='${build.home.webinf.classes}/@{destfile}'>" />
					<prefixlines prefix="append='true' " />
					<prefixlines prefix="${character.lessthan}echo " />
					<tokenfilter>
						<stringtokenizer delims="${line.seperator}" delimsaretokens="false" includeDelims="false" />
						<replaceregex pattern="(.*)"
    							flags="s"
    							replace="\1@${allowed-roles.newline.instruction}${character.lessthan}/echo>"/>
					</tokenfilter>
					<tokenfilter>
						<stringtokenizer delims="${line.seperator}" delimsaretokens="false" includeDelims="false" />
						<replaceregex pattern="@(.*)@"
    							flags="s"
    							replace="\1=${character.dollar}{\1}"/>
					</tokenfilter>
					<tokenfilter>
						<stringtokenizer delims="@@@@@@" delimsaretokens="false" includeDelims="false" />
						<replaceregex pattern="(.*)"
    							flags="s"
    							replace="${allowed-roles.build.file.constructor.header}\1${allowed-roles.build.file.constructor.tail}"/>
					</tokenfilter>
					<escapeunicode />
				</filterchain>
			</concat>
			<ant antfile="@{destfile}.xml" />
			<delete file="@{destfile}.xml" />
		</sequential>
	</macrodef>

	<target name="printers-configuration-file">
		<generateHostDependentProperties prefix="markSheet.printers" hostnames="filter.printers" destfile="printers.properties" />
	</target>

	<target name="write-index-redirect-hostnames-configuration-file">
		<generateHostDependentProperties prefix="index.html.link" destfile=".indexRedirectHostnames.properties" />
	</target>

	<target name="write-login-redirect-hostnames-configuration-file">
		<generateHostDependentProperties prefix="login.html.link" destfile=".loginRedirectHostnames.properties" />
	</target>

	<target name="write-filter-hostnames-configuration-file">
		<generateHostDependentProperties prefix="filter.hostname" destfile=".authenticationServiceHostnamesFiltering.properties" />
	</target>

	<target name="write-cas-serviceUrl-hostnames-configuration-file">
		<generateHostDependentProperties prefix="cas.serviceUrl" destfile=".casServiceUrlHostnames.properties" />
	</target>

	<target name="write-path-access-control-configuration-file">
		<copy encoding="${encoding}" file="build.properties" tofile="${build.home.webinf.classes}/.pathAccessControl.properties">
			<filterchain>
				<linecontainsregexp>
					<regexp pattern="^host.control.(path|name)." />
				</linecontainsregexp>
			</filterchain>
		</copy>
	</target>

	<target name="write-all-properties" 
		depends="write-filter-hostnames-configuration-file,write-index-redirect-hostnames-configuration-file,write-login-redirect-hostnames-configuration-file,write-cas-serviceUrl-hostnames-configuration-file,write-path-access-control-configuration-file,printers-configuration-file">
	</target>

	<target name="print-dml-message" if="dml.skip-compile">
		<echo level="info">Dml file is up to date, code generation is not necessary.</echo>
	</target>

	<target name="generate" 
			depends="check-dml-file, print-dml-message"
			unless="dml.skip-compile"
			description="Generate java code">
		<ant antfile="build_codeGenerator.xml" target="generate-domain" />
		<ant antfile="build_codeGenerator.xml" target="update-RootDomainObject" />
		<ant antfile="build_codeGenerator.xml" target="generateDeprecatedDateGettersAndSetters" />
	</target>

	<target name="generate-groups-language" description="Generate the parser for the groups language">
		<ant antfile="build_codeGenerator.xml" target="generate-groups-language" />
	</target>

	<target name="i18nDefault"
    		depends="prepare">
		<copy encoding="${encoding}" todir="${build.home.webinf.classes}/resources">
			<fileset dir="${build.home.webinf.classes}/resources">
				<include name="*_pt.properties" />
			</fileset>
			<globmapper from="*_pt.properties" to="*.properties" />
		</copy>
	</target>

	<target name="compile-domain" 
          description="Compile application's domain"
          depends="generate, generate-groups-language">
		<javac destdir="${build.home.webinf.classes}"
           debug="${compile.debug}"
           optimize="${compile.optimize}"
           deprecation="${compile.deprecation}"
           encoding="${encoding}"
           nowarn="true"
  		   >
			<compilerarg line="-processor pt.ist.fenixWebFramework.services.ServiceAnnotationProcessor,pt.ist.fenixWebFramework.security.accessControl.CheckedAnnotationProcessor" />
			<classpath refid="class.path.lib.ref" />
			<src path="${src_gen}" />
			<src path="${src}" />
			<include name="net/sourceforge/fenixedu/applicationTier/Servico/commons/ExecuteFactoryMethod.java" />
			<include name="net/sourceforge/fenixedu/tools/**" />
			<include name="net/sourceforge/fenixedu/domain/**" />
			<include name="relation/**" />
		</javac>
	</target>

	<target name="base-compile" description="Compile application" depends="compile-domain,i18nDefault, write-all-properties, generate">
		<javac destdir="${build.home.webinf.classes}" debug="${compile.debug}" optimize="${compile.optimize}" deprecation="${compile.deprecation}" encoding="${encoding}" nowarn="true">
			<compilerarg line="-processor pt.ist.fenixWebFramework.services.ServiceAnnotationProcessor,pt.ist.fenixWebFramework.struts.annotations.ActionAnnotationProcessor,pt.ist.fenixWebFramework.security.accessControl.CheckedAnnotationProcessor" />
			<classpath refid="class.path.lib.ref" />
			<src path="${src_gen}" />
			<src path="${src}" />
		</javac>
	</target>

	<target name="post-compile" description="Does some stuff after compile">
          <post-process-domain dir="${build.home.webinf.classes}" dml="${dml.definition.file.completed}">
            <classpath refid="class.path.lib.ref" />
            <classpath>
              <pathelement path="${build.home.webinf.classes}" />
            </classpath>
          </post-process-domain>
		<copy file=".actionAnnotationLog" todir="${build.home.webinf.classes}" overwrite="true" failonerror="false" />
		<java classname="pt.ist.fenixWebFramework.services.ServiceAnnotationInjector" failonerror="true" fork="true" >
			<classpath refid="class.path.lib.ref" />
			<classpath>
				<pathelement path="${build.home.webinf.classes}" />
			</classpath>
			<arg value="${build.home.webinf.classes}" />
		</java>
		<copy encoding="${encoding}" todir="${build.home.webinf.classes}">
			<fileset dir="${src}">
				<include name="**/*.*" />
				<exclude name="**/*.java" />
			</fileset>
		</copy>
	</target>

	<target name="generateStubs" depends="set-properties">
		<mkdir dir="${xfire.stubsTempDir}" />
		<mkdir dir="${xfire.stubsTempDir.classes}" />
		<taskdef name="wsgen" classname="org.codehaus.xfire.gen.WsGenTask" classpathref="class.path.lib.ref" />
		<taskdef name="for" classname="net.sf.antcontrib.logic.ForTask" classpathref="class.path.lib.ref" />
		<for param="url" list="${webServices.external.urls}">
			<sequential>
				<wsgen outputDirectory="${xfire.stubsTempDir}" wsdl="@{url}" package="net.sourceforge.fenixedu.webServices.generatedStubs" overwrite="true" />
			</sequential>
		</for>
		<javac srcdir="${xfire.stubsTempDir}" destdir="${xfire.stubsTempDir.classes}" 
			   debug="${compile.debug}" 
			   optimize="${compile.optimize}" 
			   deprecation="${compile.deprecation}" 
			   encoding="${encoding}" 
			   nowarn="true">
			<classpath refid="class.path.lib.ref" />
			<exclude name="${xfire.stubsTempDir}/*.xml" />
		</javac>
		<delete file="${lib}/fenix-stubs.jar" />
		<jar destfile="${lib}/fenix-stubs.jar">
			<fileset dir="${xfire.stubsTempDir.classes}" />
		</jar>
		<delete dir="${xfire.stubsTempDir}" />
	</target>

	<target name="compile-base" description="Compile application" depends="i18nDefault, compile-domain, write-all-properties, generate, generate-groups-language, base-compile" />
	
	<target name="compile-base-withGWT" description="Compile application" depends="i18nDefault, compile-domain, write-all-properties, generate, generate-groups-language, base-compile, FenixGWT" />

	<target name="compile" description="Compile application" depends="compile-base">
		<java classname="pt.ist.fenixWebFramework.security.accessControl.CheckedAnnotationInjector" failonerror="true"
				fork="true" maxmemory="1500m">
			<classpath refid="class.path.lib.ref" />
			<classpath>
				<pathelement path="${build.home.webinf.classes}" />
			</classpath>
			<arg value="net.sourceforge.fenixedu.injectionCode.AccessControl.check(this, net.sourceforge.fenixedu.predicates." />
			<arg value="net.sourceforge.fenixedu.injectionCode.AccessControl.check(net.sourceforge.fenixedu.predicates." />
			<arg value=");" />
			<arg value="${build.home.webinf.classes}" />
			<!--<arg value="${build.home.webinf.libs}/dml-20091101.jar" />-->
			<arg value="${build.home.webinf.libs}/jvstm.jar" />
                        <!-- arg value="${build.home.webinf.libs}/fenix-framework.jar" / -->
			<arg value="${build.home.webinf.libs}/fenix-web-framework-r46882.jar" />
			<arg value="${build.home.webinf.libs}/joda-time-1.5.2.jar" />
			<arg value="${build.home.webinf.libs}/struts.jar" />
			<arg value="lib/servlet-api-2.3.jar" />
		</java>
		<parallel threadsperprocessor="1" threadcount="2">
			<antcall target="compile-reports" />
			<sequential>
				<ant antfile="build_injectionCode.xml" target="inject-domainObjectActionLog-code" />
			</sequential>
		</parallel>
		<antcall target="post-compile"/>
	</target>
	
	<target name="compile-with-gwtc" description="Compile application" depends="compile-base-withGWT">
			<java classname="pt.ist.fenixWebFramework.security.accessControl.CheckedAnnotationInjector" failonerror="true"
					fork="true" maxmemory="1500m">
				<classpath refid="class.path.lib.ref" />
				<classpath>
					<pathelement path="${build.home.webinf.classes}" />
				</classpath>
				<arg value="net.sourceforge.fenixedu.injectionCode.AccessControl.check(this, net.sourceforge.fenixedu.predicates." />
				<arg value="net.sourceforge.fenixedu.injectionCode.AccessControl.check(net.sourceforge.fenixedu.predicates." />
				<arg value=");" />
				<arg value="${build.home.webinf.classes}" />
				<!--<arg value="${build.home.webinf.libs}/dml-20091101.jar" />-->
				<arg value="${build.home.webinf.libs}/jvstm.jar" />
	                        <!-- arg value="${build.home.webinf.libs}/fenix-framework.jar" / -->
				<arg value="${build.home.webinf.libs}/fenix-web-framework-r46854.jar" />
				<arg value="${build.home.webinf.libs}/joda-time-1.5.2.jar" />
				<arg value="${build.home.webinf.libs}/struts.jar" />
				<arg value="lib/servlet-api-2.3.jar" />
			</java>
			<parallel threadsperprocessor="1" threadcount="2">
				<antcall target="compile-reports" />
				<sequential>
					<ant antfile="build_injectionCode.xml" target="inject-domainObjectActionLog-code" />
				</sequential>
			</parallel>
			<antcall target="post-compile"/>
		</target>

	<target name="compile-without-injectionCode" description="Compile application" depends="compile-base">
		<parallel threadsperprocessor="1" threadcount="2">
			<antcall target="compile-reports" />
			<sequential>
				<ant antfile="build_injectionCode.xml" target="domainObjectActionLog-void-inject" />
			</sequential>
		</parallel>
		<antcall target="post-compile"/>
	</target>

	<target name="deploy-linux" depends="set-properties"
            description="Deploys standalone application to local web server">
		<exec executable="rm" failonerror="false" os="Linux">
			<arg line="-rf" />
			<arg line="${env.CATALINA_HOME}/webapps/${app.context}" />
		</exec>
		<exec executable="ln" failonerror="false" os="Linux">
			<arg line="-s" />
			<arg line="${build.home}" />
			<arg line="${env.CATALINA_HOME}/webapps/${app.context}" />
		</exec>
	</target>

	<target name="deploy-win" depends="set-properties"
            description="Deploys standalone application to local web server">
		<ant antfile="build_tomcat.xml" target="install">
			<property name="webapp" value="${build.home}" />
		</ant>
	</target>

	<target name="install-without-depends"
            description="Deploys standalone application to web server">
		<exec executable="ant.bat" failonerror="false" failifexecutionfails="false" os="Windows XP, Windows 2000, Windows 98, Windows NT, Windows 95">
			<arg line="-f" />
			<arg line="build_compile.xml" />
			<arg line="deploy-win" />
		</exec>
		<exec executable="ant" failonerror="false" os="Linux">
			<arg line="-f" />
			<arg line="build_compile.xml" />
			<arg line="deploy-linux" />
		</exec>
	</target>

	<target name="install"
    		depends="compile"
            description="Deploys standalone application to web server">
		<antcall target="install-without-depends" inheritall="true" />
	</target>

	<target name="base-jar"
            description="Generates a java archive applications 'core' (services and domain).">
		<mkdir dir="${deploy.home}" />
		<jar destfile="${deploy.home}/${app.name}.jar">
			<fileset dir="${build.home.webinf.classes}">
				<include name="net/sourceforge/fenixedu/_development/**/*.class" />
				<include name="net/sourceforge/fenixedu/injectionCode/**/*.class" />
				<include name="net/sourceforge/fenixedu/constants/**/*.class" />
				<include name="net/sourceforge/fenixedu/commons/**/*.class" />
				<include name="net/sourceforge/fenixedu/dataTransferObject/**/*.class" />
				<include name="net/sourceforge/fenixedu/domain/**/*.class" />
				<include name="net/sourceforge/fenixedu/fileSuport/**/*.class" />
				<include name="net/sourceforge/fenixedu/middleware/**/*.class" />
				<include name="net/sourceforge/fenixedu/integrationTier/**/*.class" />
				<include name="net/sourceforge/fenixedu/applicationTier/**/*.class" />
				<include name="net/sourceforge/fenixedu/persistenceTier/**/*.class" />
				<include name="net/sourceforge/fenixedu/persistenceTierFiltroPessoa/**/*.class" />
				<include name="net/sourceforge/fenixedu/persistenceTierJDBC/**/*.class" />
				<include name="net/sourceforge/fenixedu/persistenceTierOracle/**/*.class" />
				<include name="net/sourceforge/fenixedu/presentationTier/renderers/htmlEditor/*.class" />
				<include name="net/sourceforge/fenixedu/presentationTier/docs/*.class" />
				<include name="net/sourceforge/fenixedu/util/**/*.class" />
				<include name="net/sourceforge/fenixedu/utilInsc/**/*.class" />
				<include name="net/sourceforge/fenixedu/utilTests/**/*.class" />
				<include name="net/sourceforge/fenixedu/tools/**/*.class" />
				<include name="net/sourceforge/fenixedu/framework/**/*.class" />
				<include name="relations/*.class" />
				<include name="org/**/*.class" />
				<include name="reports/**/*.*" />
				<include name="reports.properties" />

			</fileset>
		</jar>
	</target>

	<target name="jar"
    		depends="compile, compile-reports, base-jar"
            description="Generates a java archive applications 'core' (services and domain)."/>

	<target name="jar-without-injectionCode"
    		depends="compile-without-injectionCode,compile-reports, base-jar"
            description="Generates a java archive applications 'core' (services and domain), without code injection"/>

	<target name="jar-remote" depends="set-properties" description="Generates a java archive for remote clientes.">
		<mkdir dir="${src_remote}"/>
		<mkdir dir="${src_gen_remote}"/>
		<java classname="pt.ist.fenixframework.plugins.remote.codeGenerator.RemoteDmlFileGenerator" fork="true">
			<arg value="-d" />
			<arg value="${src_remote}" />
			<arg value="-db" />
			<arg value="${src_gen_remote}" />
			<arg value="-domainModelClass" />
			<arg value="pt.ist.fenixframework.pstm.dml.FenixDomainModel" />
			<arg value="-generator" />
			<arg value="pt.ist.fenixframework.pstm.dml.FenixCodeGeneratorReadFromRsWithConverterClassParamOneBoxPerObject" />
			<arg value="${build.home.webinf.classes}" />
			<arg value="myorg.persistenceTier.SQL2JavaConverters" />
			<arg value="myorg.persistenceTier." />
			<classpath refid="class.path.lib.ref" />
			<classpath>
				<pathelement path="${build.home.webinf.classes}" />
			</classpath>
		</java>
		<java classname="pt.ist.fenixframework.plugins.remote.codeGenerator.RemoteConverterClassAwareDmlCompiler" fork="true">
			<arg value="${build.home.webinf.classes}" />
			<arg value="-originalDomainModelLimit" />
			<arg value="-d" />
			<arg value="${src_remote}" />
			<arg value="-db" />
			<arg value="${src_gen_remote}" />
			<arg value="-domainModelClass" />
			<arg value="pt.ist.fenixframework.pstm.dml.FenixDomainModel" />
			<arg value="-generator" />
			<arg value="pt.ist.fenixframework.plugins.remote.codeGenerator.FenixRemoteCodeGenerator" />
			<arg value="${src_remote}/remote.dml" />
			<classpath refid="class.path.lib.ref" />
			<classpath>
				<pathelement path="${build.home.webinf.classes}" />
			</classpath>
		</java>
		<javac destdir="${src_gen_remote}"
	           debug="${compile.debug}"
    	       optimize="${compile.optimize}"
	           deprecation="${compile.deprecation}"
	           encoding="${encoding}"
	           nowarn="true"
	  		   >
			<classpath refid="class.path.lib.ref" />
			<src path="${src_remote}" />
			<src path="${src_gen_remote}" />
		</javac>
        <post-process-domain dir="${src_gen_remote}" dml="${src_remote}/remote.dml">
          <classpath refid="class.path.lib.ref" />
          <classpath>
            <pathelement path="${src_gen_remote}" />
          </classpath>
        </post-process-domain>
		<mkdir dir="${deploy.home}" />
		<jar destfile="${deploy.home}/fenix-remote.jar">
			<fileset dir="${src_remote}">
				<include name="*.dml" />
			</fileset>
			<fileset dir="${src_gen_remote}">
				<include name="**/*.class" />
			</fileset>
		</jar>
	</target>

	<target name="war"
	    	depends="compile"
            description="Generates a web archive of the application.">
		<mkdir dir="${deploy.home}" />
		<war destfile="${deploy.home}/${app.name}.war" webxml="${build.home.webinf}/web.xml">
			<fileset dir="${build.home}">
				<exclude name="WEB-INF/web.xml" />
				<exclude name="WEB-INF/classes/**" />
				<exclude name="WEB-INF/lib/*" />
			</fileset>
			<lib dir="${build.home.webinf.libs}" />
			<classes dir="${build.home.webinf.classes}" />
		</war>
	</target>

	<target name="jsp-precompile" depends="compile">

		<mkdir dir="${build.home.jsp_gen_code}" />
		<mkdir dir="${build.home.jsp_gen_code.classes}" />

		<taskdef classname="org.apache.jasper.JspC" name="jasper2">
			<classpath id="jspc.classpath">
				<pathelement location="${jenv.JAVA_HOME}/../lib/tools.jar" />
				<fileset dir="${env.CATALINA_HOME}/bin">
					<include name="*.jar" />
				</fileset>
				<fileset dir="${env.CATALINA_HOME}/server/lib">
					<include name="*.jar" />
				</fileset>
				<fileset dir="${env.CATALINA_HOME}/common/lib">
					<include name="*.jar" />
				</fileset>
			</classpath>
		</taskdef>

		<jasper2 validateXml="false" 
	             uriroot="${build.home}" 	            
	        	 webXmlFragment="${build.home.webinf}/generated_web.xml"
	             outputDir="${build.home.jsp_gen_code}" />

		<javac destdir="${build.home.webinf.classes}"
			   failonerror="false"
               debug="${compile.debug}"
               optimize="${compile.optimize}"
               deprecation="${compile.deprecation}"
			   classpath="struts.jar"
               encoding="${encoding}"
			   nowarn="true"
	  		   >
			<classpath refid="class.path.lib.ref" />
			<classpath>
				<pathelement path="${build.home.webinf.classes};" />
				<pathelement location="${env.CATALINA_HOME}/common/classes" />
				<fileset dir="${env.CATALINA_HOME}/common/lib">
					<include name="*.jar" />
				</fileset>
				<pathelement location="${env.CATALINA_HOME}/shared/classes" />
				<fileset dir="${env.CATALINA_HOME}/shared/lib">
					<include name="*.jar" />
				</fileset>
				<fileset dir="${env.CATALINA_HOME}/bin">
					<include name="*.jar" />
				</fileset>
			</classpath>
			<src path="${build.home.jsp_gen_code}" />
		</javac>

	</target>

	<target name="fix">
		<java classname="net.sourceforge.fenixedu.applicationTier.Servico.manager.semesterInitialization.FixRoomOccupations"
				fork="true"
				failonerror="true"
				maxmemory="1024m"
				>
			<classpath refid="class.path.lib.ref" />
			<classpath>
				<pathelement path="${build.home.webinf.classes}" />
			</classpath>
		</java>
	</target>

	<target name="compile-reports">
		<mkdir dir="${build.home.reports}" />
		<taskdef name="jrc" 
		      classname="net.sf.jasperreports.ant.JRAntCompileTask">
			<classpath refid="class.path.lib.ref" />
		</taskdef>
		<jrc destdir="${build.home.reports}" srcdir="${reports}">
			<classpath refid="class.path.lib.ref" />
			<classpath>
				<pathelement path="${build.home.webinf.classes};" />
			</classpath>
			<include name="**/*.jrxml" />
		</jrc>
	</target>

	<target name="fix-html">
		<java classname="pt.utl.ist.fenix.tools.html.JspHtmlValidator"
				fork="true"
				failonerror="true"
				maxmemory="1024m"
				>
			<arg value="${basedir}" />
			<classpath refid="class.path.lib.ref" />
		</java>
	</target>

	<target name="x" description="Compile application">
		<java classname="net.sourceforge.fenixedu.Xtest" 
			dir="${build.home.webinf.classes}"
			fork="true">
			<classpath refid="class.path.lib.ref" />
			<classpath>
				<pathelement path="${build.home.webinf.classes}" />
			</classpath>
		</java>
	</target>
	
	<target name="FenixGWT" depends="set-properties, set-properties-gwt"
		description="Calls gwtc for each GWT module under Fenix scope (each module is defined by an unique *.gwt.xml).">
		<java
			classname="net.sourceforge.fenixedu.presentationTier.gwt.FenixGWTAntTasksCreator"
			dir="${build.home.webinf.classes}"
			failonerror="true"
			fork="true"
			
		>
			<arg value="${basedir}"/>
			<arg value="${build.gwtdestdir}"/>
			<arg value="${gwt.sdk}"/>
			<arg value="${gwt.args}"/>
		</java>
		
		<ant antfile="build_gwtautogentasks.xml" target="gwtc"/>
		
		<!--Comment line below to inspect autogenerated build file for GWT components -->
		<delete file="build_gwtautogentasks.xml"/>
		
	</target>	

</project>
