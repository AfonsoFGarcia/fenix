<?xml version="1.0" encoding="ISO-8859-1"?>
<project basedir="." default="compile" name="Compilation Scripts">

    <property environment="env"/>
	<property name="encoding" value="ISO-8859-1"/>	

	<property file="build.properties"/>

	<property name="config" location="config"/>

    <!-- Source code directories -->
    <property name="src" location="src"/>
    <property name="src_gen" location="src_gen"/>    
    <property name="src_tools" location="src_tools"/>

	<!-- Directories for compiled code -->
	<property name="build.home" location="build"/>
	<property name="build.home.temp" value="${build.home}/temp"/>
	<property name="build.home.temp.classes" value="${build.home.temp}/classes"/>
	<property name="build.home.webinf" value="${build.home}/WEB-INF"/>
	<property name="build.home.webinf.classes" value="${build.home.webinf}/classes"/>

    <!-- Directories with libraries (JARs) -->
    <property name="lib" location="lib" />

	<!-- Compilation options -->
	<property name="compile.debug"       value="on"/>
  	<property name="compile.deprecation" value="off"/>
  	<property name="compile.optimize"    value="on"/>

	<property name="dml.definition.file" value="${config}/domain_model.dml"/>
	<property name="dml.definition.file.completed" value="${build.home.webinf.classes}/domain_model.dml"/>

        <!-- set a different FenixDomainModel class until we don't need the ojbConcreteClass anylonger -->
        <property name="fenix.framework.domainModelClass" value="pt.ist.fenixframework.pstm.dml.FenixDomainModelWithOCC"/>

        <import file="dml-generate.xml"/>

        <path id="classpath.analysis">
          <pathelement path="${build.home.temp.classes}"/>
          <fileset dir="${lib}">
            <include name="**/*.jar"/>
          </fileset>
        </path>

	<path id="class.path.lib.ref">
        <fileset dir="${lib}">
   		    <include name="*.jar"/>
   		</fileset>
		<fileset dir="${build.home.webinf.libs}">
			<include name="*.jar"/>
		</fileset>
	</path>

	<target name="generate-domain"
	                description="Generate java code from a DML file">
		<echo message="Processing ${dml.definition.file.completed} ..."/>
		<delete dir="${src_gen}"/>
                <dml-compile dml="${config}" java-sources="${src}" java-gen="${src_gen}">
                  <classpath refid="class.path.lib.ref"/>
		</dml-compile>
		<echo level="info" message="Processing of ${dml.definition.file.completed} finished."/>
	</target>

    <target name="update-RootDomainObject"
    		description="Adds specific readByOID methods to RootDomainObject.">
		<java classname="pt.utl.ist.fenix.tools.codeGenerator.RootDomainObjectGenerator" fork="true">
			<arg value="${src_gen}"/>
			<arg value="${dml.definition.file.completed}"/>
			<classpath refid="class.path.lib.ref"/>
			<classpath>
				<pathelement path="${build.home.temp.classes}"/>			
			</classpath>
		</java>
    	<antcall target="clean-all"/>
    </target>
	
    <target name="clean-all"
    		description="Removes any generated files">
		<delete dir="${build.home.temp}"/>
    </target>

	<target name="prepare"
			description="Copy configuration files to compile dir">
		<mkdir dir="${build.home}"/>
		<mkdir dir="${build.home.temp}"/>
		<mkdir dir="${build.home.temp.classes}"/>
		<mkdir dir="${build.home.webinf}"/>
		<mkdir dir="${build.home.webinf.classes}"/>

		<javac destdir="${build.home.webinf.classes}"
               debug="${compile.debug}"
               optimize="${compile.optimize}"
               deprecation="${compile.deprecation}"
               encoding="${encoding}"
			   nowarn="true">
			<classpath refid="class.path.lib.ref"/>
			<src path="${src_gen}"/>
			<src path="${src}"/>
			<include name="net/sourceforge/fenixedu/persistenceTier/SuportePersistenteOJB.java"/>
		</javac>
	</target>

    <target name="compile"
    		description="Compile tools"
    		depends="prepare">
		<javac destdir="${build.home.temp.classes}"
			   classpath="${build.home.webinf.classes}"
               debug="${compile.debug}"
               optimize="${compile.optimize}"
               deprecation="${compile.deprecation}"
               encoding="${encoding}"
			   nowarn="true">
			<classpath refid="class.path.lib.ref"/>
			<src path="${src_tools}"/>
		</javac>
	</target>


    <target name="changeVarcharColumnsToLongvarcharColumns"
    		depends="compile">
		<java classname="net.sourceforge.fenixedu.tools.ChangeVarcharColumnsToLongvarcharColumns" fork="true">
			<classpath refid="class.path.lib.ref"/>
			<classpath>
				<pathelement path="${build.home.webinf.classes}"/>
			</classpath>
		</java>
    </target>
	
    <target name="generateDeprecatedDateGettersAndSetters" >
		<java classname="pt.utl.ist.fenix.tools.codeGenerator.DeprecatedDatesGettersAndSettersGenerator" fork="true">
			<arg value="${src_gen}"/>
			<arg value="${dml.definition.file.completed}"/>
			<classpath refid="class.path.lib.ref"/>
			<classpath>
				<pathelement path="${build.home.temp.classes}"/>			
			</classpath>
		</java>
    	<antcall target="clean-all"/>
    </target>	
	
	<!--
		Groups Language
	  -->
	
	<property name="groups.language.file" value="${config}/groups-language.g"/>
	<property name="groups.output.dir" value="${src_gen}/net/sourceforge/fenixedu/domain/accessControl/groups/language/"/>
	
	<target name="check-groups-language">
		<uptodate property="groups.language.changed" targetfile="${groups.language.file}">
			<srcfiles dir="${groups.output.dir}" includes="**/*.*"/>
		</uptodate>
	</target>
	
	<target name="prepare-groups-output-dir">
		<mkdir dir="${groups.output.dir}"/>
	</target>
		
	<target name="show-groups-message" unless="groups.language.changed">
		<echo message="No need to compile groups language grammar: ${groups.language.file}"/>
	</target>

	<target name="generate-groups-language" description="Generates the parser for the groups language"
			depends="prepare-groups-output-dir,check-groups-language,show-groups-message"
			if="groups.language.changed">
		<antlr target="${groups.language.file}" outputdirectory="${groups.output.dir}">
			<classpath refid="class.path.lib.ref"/>
		</antlr>
	</target>
	
</project>
