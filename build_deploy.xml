<?xml version="1.0" encoding="ISO-8859-1"?>
<project basedir="." default="deploy-tests" name="fenix">

    <!-- ########## PROPERTIES ########## -->
    <property environment="env"/>
	<property name="encoding" value="ISO-8859-1"/>

	<property name="deploy.home" location="deploy"/>
    <property name="deploy.jars" value="${deploy.home}/jars"/>
    <property name="deploy.jar.app-server" value="fenix-application-server.jar"/>
    <property name="deploy.sar.app-server" value="fenix-application-server.sar"/>
    <property name="deploy.jar.web-client" value="fenix-web-client.jar"/>
    <property name="deploy.war.web-client" value="fenix-web-client.war"/>
    <property name="deploy.jar.standalone" value="fenix-standalone.jar"/>
    <property name="deploy.war.standalone" value="fenix-standalone.war"/>

    <!-- ########## TARGETS ########## -->
    <target name="deploy-production-servers"
			description="Deploys application to all production servers">
		<property name="server.hostname" value="fenix.ist.utl.pt"/>

		<!-- Prompt for username & password -->
		<input message="Enter username for ${server.hostname}:" addproperty="server.username" />
		<input message="Enter password for ${server.hostname}:"  addproperty="server.password" />

		<!-- Always do a clean build -->
		<ant antfile="build_jboss.xml" target="clean-all" />

		<!-- Obtain propper build.properties -->
		<move file="build.properties"  tofile="build.properties_backup" />
		<scp file="${server.username}:${server.password}@${server.hostname}:/root/configs/build_*.properties"
			 todir="./"
			 trust="yes"/>
		<move file="build_fenix.properties"  tofile="build.properties" />

		<!-- Compile aplication server and generate jar -->
		<ant antfile="build_jboss.xml" target="jar-app-server" />
		<move file="${deploy.jars}/${deploy.jar.app-server}" tofile="${deploy.jars}/as1.jar" />
		
		<!-- Compile fenix web client generate war -->
		<ant antfile="build_jboss.xml" target="war-web-client" />
		<move file="${deploy.jars}/${deploy.war.web-client}" tofile="${deploy.jars}/fenix.war" />
		
		<!-- Compile www.apl web client generate war -->
		<delete file="build.properties"/>
		<move file="build_wwwapl.properties" tofile="build.properties" />
		<ant antfile="build_jboss.xml" target="clean-web-client" />
		<ant antfile="build_jboss.xml" target="war-web-client" />
		<move file="${deploy.jars}/${deploy.war.web-client}" tofile="${deploy.jars}/wwwapl.war" />

		<!-- Restore original build.properties -->
		<move file="build.properties_backup"  tofile="build.properties" overwrite="true" />

		<!-- Upload generated packages -->
        <scp todir="${server.username}:${server.password}@${server.hostname}:/tmp"
        	 trust="yes">
        	<fileset dir="${deploy.jars}">
				<include name="*.*ar"/>
			</fileset>
        </scp>

		<!-- Install uploaded files -->
        <sshexec host="${server.hostname}"
        		 username="${server.username}"
        		 password="${server.password}"
        		 trust="yes"
        		 command="ant -f configs/build_deploy_servers.xml deploy-all"
        		 />

		<!-- Remove all generated files -->
		<ant antfile="build_jboss.xml" target="clean-all" />
    </target>

    <target name="deploy-tests" description="Deploys application to test server">
		<property name="server.hostname"  value="fenix-tests.ist.utl.pt" />
		<property name="server.deployDirectory" value="/var/tomcat4/webapps"/>
		<property name="server.restartCommand"
				  value="apachectl stop; /etc/init.d/tomcat4 restart; apachectl start"
				  />
		<property name="server.startCommand" value="/etc/init.d/tomcat4 start" />
		<property name="server.stopCommand" value="/etc/init.d/tomcat4 stop" />		

		<!-- Prompt for username & password -->
		<input message="Enter username for ${server.hostname}:" addproperty="server.username" />
		<input message="Enter password for ${server.hostname}:" addproperty="server.password" />

		<!-- Obtain propper build.properties -->
		<move file="build.properties" tofile="build.properties_backup" />
		<scp file="${server.username}:${server.password}@${server.hostname}:/root/configs/build_fenix-tests_extra.properties" todir="./" 
			trust="yes"/>
		<move file="build_fenix-tests_extra.properties"  tofile="build.properties" />
	<!--
		<property file="build.properties"/>
	-->
		<antcall target="stop-server"/>
		<!-- Deploy the application-->
		<antcall target="deploy"/>

		<sleep seconds="5"/>

		<delete file="build.properties"/>
		<scp file="${server.username}:${server.password}@${server.hostname}:/root/configs/build_fenix-tests_intra.properties" todir="./" 
			trust="yes"/>

		<move file="build_fenix-tests_intra.properties"  tofile="build.properties"  />

		<!-- Deploy the application-->
		<antcall target="deploy" />

		<antcall target="start-server" />
		<!-- Restore original build.properties -->
		<move file="build.properties_backup" tofile="build.properties" overwrite="true"/>
    </target>


    <target name="deploy-fenix" description="Deploys application into production server">
		<property name="server.hostname" value="fenix.ist.utl.pt"/>
		<property name="server.deployDirectory" value="/opt/jakarta/tomcat/webapps" />

		<property name="server.stopCommand" value="rcapache stop ; rctomcat stop" />
		<property name="server.startCommand" value="rctomcat start; rcapache start" />

		<!-- Prompt for username & password -->
		<input message="Enter username for ${server.hostname}:" addproperty="server.username" />
		<input message="Enter password for ${server.hostname}:"  addproperty="server.password" />

		<!-- Obtain propper build.properties -->
		<move file="build.properties"  tofile="build.properties_backup" />
		<scp file="${server.username}:${server.password}@${server.hostname}:/root/configs/build_fenix.properties" todir="./" 
			trust="yes"/>
		<move file="build_fenix.properties"  tofile="build.properties" />

		<!-- Deploy the application-->
		
		<antcall target="stop-server" />
		<antcall target="deploy"/>
		<antcall target="start-server" />		

		<sleep seconds="5"/>

		<delete file="build.properties"/>

		<scp file="${server.username}:${server.password}@${server.hostname}:/root/configs/build_wwwapl.properties"
			 todir="./" trust="yes"/>
		<move file="build_wwwapl.properties"  tofile="build.properties" />
		<sleep seconds="5"/>

		<!-- Deploy the application-->
		<antcall target="deploy-apl"/>

		<!-- Restore original build.properties -->
		<move file="build.properties_backup"  tofile="build.properties"  overwrite="true" />
    </target>

    <target name="deploy-ashes" description="Deploys application to fenix ashes">
		<property name="server.hostname"  value="fenix-tests.ist.utl.pt" />
		<property name="server.deployDirectory" value="/var/tomcat4/webapps"/>
		<property name="server.restartCommand"
				  value="/etc/init.d/httpd stop; /etc/init.d/tomcat4 restart; /etc/init.d/httpd start"
				  />
		<property name="server.startCommand" value="/etc/init.d/tomcat4 start" />
		<property name="server.stopCommand" value="/etc/init.d/tomcat4 stop" />		

		<!-- Prompt for username & password -->
		<input message="Enter username for ${server.hostname}:" addproperty="server.username" />
		<input message="Enter password for ${server.hostname}:" addproperty="server.password" />

		<!-- Obtain propper build.properties -->
		<move file="build.properties" tofile="build.properties_backup" />
		<scp file="${server.username}:${server.password}@${server.hostname}:/root/configs/build_fenix-ashes_extra.properties" todir="./"
			trust="yes"/>
		<move file="build_fenix-ashes_extra.properties"  tofile="build.properties" />
	<!--
		<property file="build.properties"/>
	-->
		<antcall target="stop-server"/>
		<!-- Deploy the application-->
		<antcall target="deploy"/>

		<sleep seconds="5"/>

		<delete file="build.properties"/>
		<scp file="${server.username}:${server.password}@${server.hostname}:/root/configs/build_fenix-ashes_intra.properties" todir="./" 
			trust="yes"/>

		<move file="build_fenix-ashes_intra.properties"  tofile="build.properties"  />

		<!-- Deploy the application-->
		<antcall target="deploy" />

		<antcall target="start-server" />
		<!-- Restore original build.properties -->
		<move file="build.properties_backup" tofile="build.properties" overwrite="true"/>
    </target>

    <target name="deploy" description="Deploys application">
		<property file="build.properties"/>

		<!-- Clean-all -->
        <ant antfile="build.xml" target="clean-all" />

		<!-- Create WAR's -->
        <ant antfile="build_jboss.xml" target="jar-standalone" />
	<move file="deploy/jars/fenix-standalone.jar"  tofile="deploy/${app.name}.jar" />
		<!-- Transfer WAR's to server -->
        <scp todir="${server.username}:${server.password}@${server.hostname}:${server.deployDirectory}" file="deploy/${app.name}.jar" 
        	trust="yes"/>

		<!-- Decompress WAR'S -->
		<!-- Delete WAR'S -->
		<!-- Restart Server -->
        <sshexec host="${server.hostname}" username="${server.username}" password="${server.password}"
        		 command="cd ${server.deployDirectory}; rm -rf ${app.name}; unzip ${app.name}.jar -d ${app.name} ; rm -f ${app.name}.jar" 
        		 trust="yes"/>
		<!-- Clean-all -->
        <ant antfile="build.xml" target="clean-all" />
    </target>

    <target name="deploy-apl" description="Deploys application to WWW.APL">

		<property file="build.properties"/>

		<!-- Clean-all -->
        <ant antfile="build.xml" target="clean-all"/>

		<!-- Create WAR's -->
        <ant antfile="build.xml" target="deploy-webapp" />

		<!-- Transfer WAR's to server -->
        <scp todir="${server.username}:${server.password}@${server.hostname}:/tmp" file="deploy/${app.name}.war"
         trust="yes"/>

		<sleep seconds="5"/>

		<!-- Decompress WAR'S -->
		<!-- Delete WAR'S -->
		<!-- Restart Server -->
        <sshexec host="${server.hostname}" username="${server.username}" password="${server.password}"
        		 command="cd /root/configs/; ant -f build_deploy_wwwapl.xml" trust="yes"/>
		<!-- Clean-all -->
        <ant antfile="build.xml" target="clean-all" />
    </target>
    
	<target name="stop-server">
        <sshexec host="${server.hostname}" username="${server.username}" password="${server.password}"
        				 command="${server.stopCommand}" trust="yes"/>
	</target>
	<target name="start-server">
        <sshexec host="${server.hostname}" username="${server.username}" password="${server.password}"
        				 command="${server.startCommand}" trust="yes"/>
	</target>
	
</project>
